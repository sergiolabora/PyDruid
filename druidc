#! /usr/bin/env python3

import getpass
import json
import os

from compiler   import Compiler
from datetime   import datetime
from transpiler import Transpiler
from text       import Scanner
from syntax     import Parser
from sys        import argv
from utils      import Error


"""
The PyDruid Compiler
https://github.com/sergiolabora/PyDruid
====================
Author: Sergio Labora (@sergiolabora)

PyDruid is a compiler for the Druid programming language, written only using Python in
order to compile the actual Druid compiler on nearly any platform (x86, ARM, and other
operating systems like Haiku OS).

PyDruid is released under the CC BY-NC-SA license, so feel free to do whatever you want
with this code as long as you follow the license conditions.

If you want to contribute... well, feel free to ask me, but is most probable I'm not letting
you modify Druid or any related project.
"""


def tokenize(files):
    toks = []

    for fn in files:
        with open(fn, "r") as file_:
            toks += Scanner(file_).scan()
    
    return toks

def parse(toks):
    return Parser(toks).parse()

def transpile(ast):
    return Transpiler(ast, "kk").transpile() # TODO: el proyecto sigue sin llamarse 'kk'

def compile_proj(name):
    if not os.path.isdir(name):                     Error("couldn't open the project folder.")
    if not os.path.isfile(f'{name}/project.json'):  Error("couldn't open the project index file.")

    # Cargar el índice
    with open(f'{name}/project.json', 'r') as proj_idx_f:
        proj_idx = json.load(proj_idx_f)
    
    # Obtener el código fuente
    if not proj_idx.get('files'): Error("field 'files' missing in 'project.json'.")

    files = []

    for f in proj_idx['files']:
        fn = f'{name}/{f}'
        if not os.path.isfile(fn): Error(f"couldn't open the source file: '{f}'.")
        files.append(fn)
    
    # Compilar
    toks    = tokenize(files)
    ast     = parse(toks)

    sc      = Transpiler(ast, "kk").transpile()

    compiler    = Compiler(name, sc)
    status      = compiler.compile(clean=False)

    return (compiler.output, status)

def init(proj_name: str):
    fld_name = proj_name.lower()
    user_name = getpass.getuser().lower()

    # Crear una carpeta
    try:    os.mkdir(fld_name)
    except: Error("couldn't create the project folder. check permissions.")
    
    # Crear los archivos
    proj_idx = None

    with open('patterns/project.json', 'r') as proj_idx_f:
        proj_idx = json.load(proj_idx_f)
        proj_idx["name"] = proj_name
        proj_idx["author"] = user_name

    with open(f'{fld_name}/project.json', 'w') as proj_idx_f:
        json.dump(proj_idx, proj_idx_f)

    main_c = ''

    with open('patterns/main.druid', 'r') as main_f:
        main_c = main_f.read()
    
    main_c = main_c.replace("{user}", user_name)
    main_c = main_c.replace("{proj_name}", proj_name)
    main_c = main_c.replace("{pkg_name}", proj_name.lower())
    main_c = main_c.replace("{today}", datetime.now().strftime('%d/%m/%y'))

    with open(f'{fld_name}/main.druid', 'w') as main_f:
        main_f.write(main_c)

    print("\x1b[1m· \x1b[m project \x1b[1;32msuccesfully \x1b[minitialized.")

def run(name):
    # Compilar
    f = compile_proj(name)

    # Comprobar que el archivo se puede lanzar
    if f[1] != 0: Error("cannot launch the project because the compilation process went wrong.")

    # Lanzar el ejecutable
    os.system(f[0])

def main(args):
    print("\x1b[1;32m·: \x1b[37mDruid \x1b[mCompiler \x1b[1;32m:· \x1b[m")

    if len(args) < 2: Error("the compiler must take an option.")
    option = args[1]

    if option == 'compile':
        if len(args) != 3: Error("the 'compile' option must take an input project.")
        name = args[2]
        compile_proj(name)

    elif option == 'init':
        if len(args) < 3: Error("the 'init' option must take a project name.")
        init(args[2])
    
    elif option == 'run':
        if len(args) < 3: Error("the 'run' option must take a project name.")
        run(args[2])
    
    else:
        Error("invalid option. use 'help' to display a list of available options.")
        

if __name__ == '__main__':
    main(argv)
