import json

from datetime   import datetime
from os         import path
from syntax     import *
from utils      import Error


class Transpiler:
    def __init__(self, ast, proj_name):
        self.ast = ast

        if not path.isfile(f'{proj_name}/project.json'): Error("couldn't open the project configuration file.")

        self.proj_config    = None
        self.proj_name      = None
        self.proj_author    = None
        self.libraries      = []
        
        with open(f'{proj_name}/project.json', 'r') as proj_idx_f:
            self.proj_config = json.load(proj_idx_f)
            self.load()
    
    def __get_init_comment(self):
        date = datetime.now().strftime('%d/%m/%y %H:%M:%S')

        initial_comment = f"""/* This source code has been automatically generated by the PyDruid compiler */
/*      Do not touch anything here if you don't know what you are doing      */
// Author:  {self.proj_author}
// Date:    {date}

"""
        return initial_comment
        
    def __get_includes(self):
        result = ''

        for lib in self.libraries:
            result += f'#include <{lib}>\n'
        
        return result
    
    def __get_druid_definitions(self):
        result = ''

        result += '#define _new_instance(type_t) self = malloc(sizeof(type_t))\n\n'

        result += 'typedef void *dptr;\n'
        result += 'typedef unsigned char byte;\n'
        result += 'typedef unsigned int word;\n'

        return result

    def __find_main_class(self):
        for pkg in self.ast.packages:
            for method in pkg.methods:
                if method.id == 'main':
                    return method.parent.get_full_id()

            for class_ in pkg.classes:
                for method in class_.methods:
                    return method.parent.get_full_id()
            
        Error("couldn't find the main class.")
    
    def __create_main_function(self):
        main_class = self.__find_main_class()
        # main_class = '_cambia_esto_cuando_funcione_' # TODO: xd

        result = 'int main() {\n'

        result += f'\t{main_class} *main_class = _{main_class}_init();\n'
        result += f'\treturn main_class -> main();\n'

        result += '}\n'

        return result
    
    def load(self):
        if not self.proj_config: Error("any project index has been loaded.")

        # Comprobar nombre del proyecto
        if not self.proj_config.get('name'): Error("field 'name' missing in 'project.json'.")
        # if self.proj_config['name'] == self.ast.id: self.proj_name = self.proj_config['name']
        # else:                                       Error('the project name does not match with the project settings name.')

        # Comprobar y guardar el nombre del autor
        if not self.proj_config.get('author'): Error("field 'author' missing in 'project.json'")
        self.proj_author = self.proj_config['author']

        # Obtener las librer√≠as de C necesarias
        if not self.proj_config.get('include'): Error("field 'include' missing in 'project.json'")
        self.libraries = self.proj_config['include']

    def transpile(self):
        init_comment = self.__get_init_comment()
        includes = self.__get_includes() + '\n'
        types = self.__get_druid_definitions()

        result = f'{init_comment}\n{includes}\n{types}\n'

        code = ''

        for pkg in self.ast.packages:
            code += pkg.to_string()

        result += code + '\n'

        result += self.__create_main_function()

        return result
